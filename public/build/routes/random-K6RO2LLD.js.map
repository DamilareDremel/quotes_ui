{
  "version": 3,
  "sources": ["../../../app/routes/random.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\random.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\random.tsx\");\n  import.meta.hot.lastModified = \"1750262821269.9417\";\n}\n// REMIX HMR END\n\nimport { useLoaderData, Link } from \"@remix-run/react\";\nimport { json } from \"@remix-run/node\";\nexport const loader = async () => {\n  try {\n    const res = await fetch(`${process.env.BACKEND_URL}/quotes/random`);\n    if (!res.ok) {\n      throw new Error(\"Failed to fetch random quote\");\n    }\n    const data = await res.json();\n    return json(data);\n  } catch (err) {\n    return json({\n      id: \"\",\n      text: \"No quote available.\",\n      author: \"\",\n      tags: [],\n      userId: \"\"\n    });\n  }\n};\nexport default function RandomQuote() {\n  _s();\n  const quote = useLoaderData();\n  return <div className=\"max-w-2xl mx-auto text-center p-8\">\r\n      <h1 className=\"text-3xl font-bold mb-6\">Random Quote</h1>\r\n      <p className=\"italic text-lg mb-4\">\"{quote.text}\"</p>\r\n      {quote.author && <p className=\"text-right\">\u2014 {quote.author}</p>}\r\n\r\n      {quote.tags && quote.tags.length > 0 && <p className=\"text-sm text-gray-500 mt-2\">\r\n          Tags: {quote.tags.join(\", \")}\r\n        </p>}\r\n\r\n      <div className=\"mt-6\">\r\n        <Link to=\"/random\" reloadDocument>\r\n          <button className=\"bg-blue-600 text-white px-4 py-2 rounded\">\r\n            Get Another Quote\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>;\n}\n_s(RandomQuote, \"GisoTYXLQStvnTSLOkW5LMJ9sm4=\", false, function () {\n  return [useLoaderData];\n});\n_c = RandomQuote;\nvar _c;\n$RefreshReg$(_c, \"RandomQuote\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAsBA,kBAAqB;AAuBf;AA5CN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,kCAAoC,EAAE;AAAA,EAC/E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAyB;AACzB,cAAY,IAAI,eAAe;AACjC;AAuBe,SAAR,cAA+B;AACpC,KAAG;AACH,QAAM,QAAQ,cAAc;AAC5B,SAAO,mDAAC,SAAI,WAAU,qCAClB;AAAA,uDAAC,QAAG,WAAU,2BAA0B,4BAAxC;AAAA;AAAA;AAAA;AAAA,WAAoD;AAAA,IACpD,mDAAC,OAAE,WAAU,uBAAsB;AAAA;AAAA,MAAE,MAAM;AAAA,MAAK;AAAA,SAAhD;AAAA;AAAA;AAAA;AAAA,WAAiD;AAAA,IAChD,MAAM,UAAU,mDAAC,OAAE,WAAU,cAAa;AAAA;AAAA,MAAG,MAAM;AAAA,SAAnC;AAAA;AAAA;AAAA;AAAA,WAA0C;AAAA,IAE1D,MAAM,QAAQ,MAAM,KAAK,SAAS,KAAK,mDAAC,OAAE,WAAU,8BAA6B;AAAA;AAAA,MACvE,MAAM,KAAK,KAAK,IAAI;AAAA,SADS;AAAA;AAAA;AAAA;AAAA,WAEtC;AAAA,IAEF,mDAAC,SAAI,WAAU,QACb,6DAAC,QAAK,IAAG,WAAU,gBAAc,MAC/B,6DAAC,YAAO,WAAU,4CAA2C,iCAA7D;AAAA;AAAA;AAAA;AAAA,WAEA,KAHF;AAAA;AAAA;AAAA;AAAA,WAIA,KALF;AAAA;AAAA;AAAA;AAAA,WAMA;AAAA,OAfG;AAAA;AAAA;AAAA;AAAA,SAgBL;AACJ;AACA,GAAG,aAAa,gCAAgC,OAAO,WAAY;AACjE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,aAAa;AAE9B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
