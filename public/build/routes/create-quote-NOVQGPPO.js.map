{
  "version": 3,
  "sources": ["../../../app/routes/create-quote.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\create-quote.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\create-quote.tsx\");\n  import.meta.hot.lastModified = \"1750262767715.6665\";\n}\n// REMIX HMR END\n\nimport { Form, useActionData } from \"@remix-run/react\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { storage, setFlash } from \"~/utils/session.server\";\nexport const action = async ({\n  request\n}) => {\n  const formData = await request.formData();\n  const content = formData.get(\"content\");\n  const author = formData.get(\"author\");\n  const tag = formData.get(\"tag\");\n  if (!content || !author || !tag) {\n    return json({\n      error: \"All fields are required\"\n    }, {\n      status: 400\n    });\n  }\n  const session = await storage.getSession(request.headers.get(\"Cookie\"));\n  const token = session.get(\"token\");\n  if (!token) {\n    return redirect(\"/login\");\n  }\n  const res = await fetch(`${process.env.BACKEND_URL}/quotes`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      text: content,\n      author,\n      tags: [tag]\n    })\n  });\n  if (res.ok) {\n    setFlash(session, \"Quote added successfully!\");\n    return redirect(\"/quotes\", {\n      headers: {\n        \"Set-Cookie\": await storage.commitSession(session)\n      }\n    });\n  }\n  const data = await res.json().catch(() => null);\n  const errorMsg = data?.message || \"Failed to add quote\";\n  return json({\n    error: errorMsg\n  }, {\n    status: 400\n  });\n};\nexport default function CreateQuote() {\n  _s();\n  const actionData = useActionData();\n  return <div className=\"max-w-xl mx-auto p-4\">\r\n      <h1 className=\"text-3xl font-bold mb-6\">Add New Quote</h1>\r\n\r\n      {actionData?.error && <p className=\"text-red-600 mb-4\">{actionData.error}</p>}\r\n\r\n      <Form method=\"post\" className=\"space-y-4\">\r\n        <div>\r\n          <label>Content</label>\r\n          <input name=\"content\" type=\"text\" required className=\"w-full border p-2 rounded\" />\r\n        </div>\r\n        <div>\r\n          <label>Author</label>\r\n          <input name=\"author\" type=\"text\" required className=\"w-full border p-2 rounded\" />\r\n        </div>\r\n        <div>\r\n          <label>Tag</label>\r\n          <input name=\"tag\" type=\"text\" required className=\"w-full border p-2 rounded\" />\r\n        </div>\r\n        <button className=\"bg-blue-600 text-white px-4 py-2 rounded\">Save</button>\r\n      </Form>\r\n    </div>;\n}\n_s(CreateQuote, \"fHVw5pq0Zwd2gXh2gyrnVdHnLCc=\", false, function () {\n  return [useActionData];\n});\n_c = CreateQuote;\nvar _c;\n$RefreshReg$(_c, \"CreateQuote\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAsBA,kBAA+B;AAC/B,qBAAkC;AAoD5B;AA1EN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,wCAA0C,EAAE;AAAA,EACrF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA+B;AAC/B,cAAY,IAAI,eAAe;AACjC;AAqDe,SAAR,cAA+B;AACpC,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,SAAO,mDAAC,SAAI,WAAU,wBAClB;AAAA,uDAAC,QAAG,WAAU,2BAA0B,6BAAxC;AAAA;AAAA;AAAA;AAAA,WAAqD;AAAA,IAEpD,YAAY,SAAS,mDAAC,OAAE,WAAU,qBAAqB,qBAAW,SAA7C;AAAA;AAAA;AAAA;AAAA,WAAmD;AAAA,IAEzE,mDAAC,QAAK,QAAO,QAAO,WAAU,aAC5B;AAAA,yDAAC,SACC;AAAA,2DAAC,WAAM,uBAAP;AAAA;AAAA;AAAA;AAAA,eAAc;AAAA,QACd,mDAAC,WAAM,MAAK,WAAU,MAAK,QAAO,UAAQ,MAAC,WAAU,+BAArD;AAAA;AAAA;AAAA;AAAA,eAAiF;AAAA,WAFnF;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,mDAAC,SACC;AAAA,2DAAC,WAAM,sBAAP;AAAA;AAAA;AAAA;AAAA,eAAa;AAAA,QACb,mDAAC,WAAM,MAAK,UAAS,MAAK,QAAO,UAAQ,MAAC,WAAU,+BAApD;AAAA;AAAA;AAAA;AAAA,eAAgF;AAAA,WAFlF;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,mDAAC,SACC;AAAA,2DAAC,WAAM,mBAAP;AAAA;AAAA;AAAA;AAAA,eAAU;AAAA,QACV,mDAAC,WAAM,MAAK,OAAM,MAAK,QAAO,UAAQ,MAAC,WAAU,+BAAjD;AAAA;AAAA;AAAA;AAAA,eAA6E;AAAA,WAF/E;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,mDAAC,YAAO,WAAU,4CAA2C,oBAA7D;AAAA;AAAA;AAAA;AAAA,aAAiE;AAAA,SAbnE;AAAA;AAAA;AAAA;AAAA,WAcA;AAAA,OAnBG;AAAA;AAAA;AAAA;AAAA,SAoBL;AACJ;AACA,GAAG,aAAa,gCAAgC,OAAO,WAAY;AACjE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,aAAa;AAE9B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
