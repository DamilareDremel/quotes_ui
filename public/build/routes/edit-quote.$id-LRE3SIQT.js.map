{
  "version": 3,
  "sources": ["../../../app/routes/edit-quote.$id.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\edit-quote.$id.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\edit-quote.$id.tsx\");\n  import.meta.hot.lastModified = \"1750240183110.2764\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from \"@remix-run/node\";\nimport { useLoaderData, Form } from \"@remix-run/react\";\nimport { getToken, storage, setFlash } from \"~/utils/session.server\";\nexport const loader = async ({\n  params,\n  request\n}) => {\n  const token = await getToken(request);\n  if (!token) {\n    return redirect(\"/login\");\n  }\n  const res = await fetch(`https://quotes-auth.onrender.com/quotes/${params.id}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  if (!res.ok) {\n    throw new Response(\"Quote not found\", {\n      status: 404\n    });\n  }\n  const quote = await res.json();\n  return json({\n    quote,\n    token\n  });\n};\nexport const action = async ({\n  request,\n  params\n}) => {\n  const formData = await request.formData();\n  const text = formData.get(\"text\");\n  const tags = formData.get(\"tags\");\n  const token = await getToken(request);\n  const res = await fetch(`https://quotes-auth.onrender.com/quotes/${params.id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      text,\n      tags: tags?.toString().split(\",\").map(tag => tag.trim())\n    })\n  });\n  if (!res.ok) throw new Error(\"Failed to update quote\");\n  const session = await storage.getSession(request.headers.get(\"Cookie\"));\n  setFlash(session, \"Quote updated successfully!\");\n  return redirect(\"/quotes\", {\n    headers: {\n      \"Set-Cookie\": await storage.commitSession(session)\n    }\n  });\n  return redirect(\"/quotes\");\n};\nexport default function EditQuote() {\n  _s();\n  const {\n    quote\n  } = useLoaderData();\n  return <div className=\"max-w-xl mx-auto p-6\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Edit Quote</h1>\r\n      <Form method=\"post\">\r\n        <div className=\"mb-4\">\r\n          <label className=\"block mb-1 font-medium\">Quote Text</label>\r\n          <textarea name=\"text\" defaultValue={quote.text} className=\"w-full border rounded p-2\" required />\r\n        </div>\r\n\r\n        <div className=\"mb-4\">\r\n          <label className=\"block mb-1 font-medium\">Tags (comma-separated)</label>\r\n          <input type=\"text\" name=\"tags\" defaultValue={quote.tags?.join(\", \")} className=\"w-full border rounded p-2\" />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"bg-blue-600 text-white px-4 py-2 rounded\">\r\n          Update Quote\r\n        </button>\r\n      </Form>\r\n    </div>;\n}\n_s(EditQuote, \"0osv/lUOAdbtIyyrpLqKMfFEN8M=\", false, function () {\n  return [useLoaderData];\n});\n_c = EditQuote;\nvar _c;\n$RefreshReg$(_c, \"EditQuote\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAA+B;AAE/B,qBAA4C;AA4DtC;AAlFN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,0CAA4C,EAAE;AAAA,EACvF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAiC;AACjC,cAAY,IAAI,eAAe;AACjC;AA2De,SAAR,YAA6B;AAClC,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,SAAO,mDAAC,SAAI,WAAU,wBAClB;AAAA,uDAAC,QAAG,WAAU,2BAA0B,0BAAxC;AAAA;AAAA;AAAA;AAAA,WAAkD;AAAA,IAClD,mDAAC,QAAK,QAAO,QACX;AAAA,yDAAC,SAAI,WAAU,QACb;AAAA,2DAAC,WAAM,WAAU,0BAAyB,0BAA1C;AAAA;AAAA;AAAA;AAAA,eAAoD;AAAA,QACpD,mDAAC,cAAS,MAAK,QAAO,cAAc,MAAM,MAAM,WAAU,6BAA4B,UAAQ,QAA9F;AAAA;AAAA;AAAA;AAAA,eAA+F;AAAA,WAFjG;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MAEA,mDAAC,SAAI,WAAU,QACb;AAAA,2DAAC,WAAM,WAAU,0BAAyB,sCAA1C;AAAA;AAAA;AAAA;AAAA,eAAgE;AAAA,QAChE,mDAAC,WAAM,MAAK,QAAO,MAAK,QAAO,cAAc,MAAM,MAAM,KAAK,IAAI,GAAG,WAAU,+BAA/E;AAAA;AAAA;AAAA;AAAA,eAA2G;AAAA,WAF7G;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MAEA,mDAAC,YAAO,MAAK,UAAS,WAAU,4CAA2C,4BAA3E;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAbF;AAAA;AAAA;AAAA;AAAA,WAcA;AAAA,OAhBG;AAAA;AAAA;AAAA;AAAA,SAiBL;AACJ;AACA,GAAG,WAAW,gCAAgC,OAAO,WAAY;AAC/D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,WAAW;AAE5B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
